{"version":3,"sources":["../src/mercID.ts"],"sourcesContent":["/** Convert zoom-x-y to a singular number */\nexport function toID (zoom: number, x: number, y: number): bigint {\n  return BigInt((((1 << zoom) * y + x) * 32) + zoom)\n}\n\n/** Convert a number or bigint to [zoom, x, y] */\nexport function fromID (idB: bigint): [zoom: number, x: number, y: number] {\n  let id = Number(idB)\n  const z = id % 32\n  id = (id - z) / 32\n  const x = id % (1 << z)\n  const y = (id - x) / (1 << z)\n\n  return [z, x, y]\n}\n\n/** Given a tile ID, find the 4 children tile IDs */\nexport function children (\n  id: bigint\n): [blID: bigint, brID: bigint, tlID: bigint, trID: bigint] {\n  const [zoom, x, y] = fromID(id)\n  return [\n    toID(zoom + 1, x * 2, y * 2),\n    toID(zoom + 1, x * 2 + 1, y * 2),\n    toID(zoom + 1, x * 2, y * 2 + 1),\n    toID(zoom + 1, x * 2 + 1, y * 2 + 1)\n  ]\n}\n\n/**\n * grab the tiles next to the current tiles zoom-x-y\n * only include adjacent tiles, not diagonal\n */\nexport function neighborsXY (\n  zoom: number,\n  x: number,\n  y: number\n): Array<[zoom: number, x: number, y: number]> {\n  const neighbors: Array<[zoom: number, x: number, y: number]> = []\n  if (x - 1 >= 0) neighbors.push([zoom, x - 1, y])\n  if (x + 1 < (1 << zoom)) neighbors.push([zoom, x + 1, y])\n  if (y - 1 >= 0) neighbors.push([zoom, x, y - 1])\n  if (y + 1 < (1 << zoom)) neighbors.push([zoom, x, y + 1])\n  return neighbors\n}\n\n/** Given a tileID, find the parent tile */\nexport function parent (id: bigint): bigint {\n  const [z, x, y] = fromID(id)\n  return toID(z - 1, Math.floor(x / 2), Math.floor(y / 2))\n}\n\n/**\n * convert an id to a zoom-x-y after setting it to a new parent zoom\n */\nexport function toIJ (id: bigint, level?: number | bigint): [zoom: number, i: number, j: number] {\n  if (level !== undefined) {\n    let [currentZoom] = fromID(id)\n    while (level < currentZoom) {\n      id = parent(id)\n      currentZoom--\n    }\n  }\n  return fromID(id)\n}\n\n/** Check if the parentID contains the childID within the sub quads */\nexport function contains (parentID: bigint, childID: bigint): boolean {\n  const [pz, px, py] = fromID(parentID)\n  const [cz, cx, cy] = fromID(childID)\n  if (pz > cz) return false\n  else if (pz === cz) return px === cx && py === cy\n  else {\n    const diff = cz - pz\n    const mask = (1 << diff) - 1\n    return (px === (cx & ~mask)) && (py === (cy & ~mask))\n  }\n}\n\n/** Given a Tile ID, check if the zoom is 0 or not */\nexport function isFace (id: bigint): boolean {\n  const [z] = fromID(id)\n  return z === 0\n}\n\n/** Get the zoom from the tile ID */\nexport function level (id: bigint): number {\n  const [z] = fromID(id)\n  return z\n}\n"],"mappings":"yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,cAAAE,EAAA,aAAAC,EAAA,WAAAC,EAAA,WAAAC,EAAA,UAAAC,EAAA,gBAAAC,EAAA,WAAAC,EAAA,SAAAC,EAAA,SAAAC,IAAA,eAAAC,EAAAX,GACO,SAASS,EAAMG,EAAcC,EAAWC,EAAmB,CAChE,OAAO,SAAU,GAAKF,GAAQE,EAAID,GAAK,GAAMD,CAAI,CACnD,CAGO,SAASR,EAAQW,EAAmD,CACzE,IAAIC,EAAK,OAAOD,CAAG,EACbE,EAAID,EAAK,GACfA,GAAMA,EAAKC,GAAK,GAChB,IAAMJ,EAAIG,GAAM,GAAKC,GACfH,GAAKE,EAAKH,IAAM,GAAKI,GAE3B,MAAO,CAACA,EAAGJ,EAAGC,CAAC,CACjB,CAGO,SAASZ,EACdc,EAC0D,CAC1D,GAAM,CAACJ,EAAMC,EAAGC,CAAC,EAAIV,EAAOY,CAAE,EAC9B,MAAO,CACLP,EAAKG,EAAO,EAAGC,EAAI,EAAGC,EAAI,CAAC,EAC3BL,EAAKG,EAAO,EAAGC,EAAI,EAAI,EAAGC,EAAI,CAAC,EAC/BL,EAAKG,EAAO,EAAGC,EAAI,EAAGC,EAAI,EAAI,CAAC,EAC/BL,EAAKG,EAAO,EAAGC,EAAI,EAAI,EAAGC,EAAI,EAAI,CAAC,CACrC,CACF,CAMO,SAASP,EACdK,EACAC,EACAC,EAC6C,CAC7C,IAAMI,EAAyD,CAAC,EAChE,OAAIL,EAAI,GAAK,GAAGK,EAAU,KAAK,CAACN,EAAMC,EAAI,EAAGC,CAAC,CAAC,EAC3CD,EAAI,EAAK,GAAKD,GAAOM,EAAU,KAAK,CAACN,EAAMC,EAAI,EAAGC,CAAC,CAAC,EACpDA,EAAI,GAAK,GAAGI,EAAU,KAAK,CAACN,EAAMC,EAAGC,EAAI,CAAC,CAAC,EAC3CA,EAAI,EAAK,GAAKF,GAAOM,EAAU,KAAK,CAACN,EAAMC,EAAGC,EAAI,CAAC,CAAC,EACjDI,CACT,CAGO,SAASV,EAAQQ,EAAoB,CAC1C,GAAM,CAACC,EAAGJ,EAAGC,CAAC,EAAIV,EAAOY,CAAE,EAC3B,OAAOP,EAAKQ,EAAI,EAAG,KAAK,MAAMJ,EAAI,CAAC,EAAG,KAAK,MAAMC,EAAI,CAAC,CAAC,CACzD,CAKO,SAASJ,EAAMM,EAAYV,EAA+D,CAC/F,GAAIA,IAAU,OAAW,CACvB,GAAI,CAACa,CAAW,EAAIf,EAAOY,CAAE,EAC7B,KAAOV,EAAQa,GACbH,EAAKR,EAAOQ,CAAE,EACdG,GAEJ,CACA,OAAOf,EAAOY,CAAE,CAClB,CAGO,SAASb,EAAUiB,EAAkBC,EAA0B,CACpE,GAAM,CAACC,EAAIC,EAAIC,CAAE,EAAIpB,EAAOgB,CAAQ,EAC9B,CAACK,EAAIC,EAAIC,CAAE,EAAIvB,EAAOiB,CAAO,EACnC,GAAIC,EAAKG,EAAI,MAAO,GACf,GAAIH,IAAOG,EAAI,OAAOF,IAAOG,GAAMF,IAAOG,EAC1C,CAEH,IAAMC,GAAQ,GADDH,EAAKH,GACS,EAC3B,OAAQC,KAAQG,EAAK,CAACE,IAAWJ,KAAQG,EAAK,CAACC,EACjD,CACF,CAGO,SAASvB,EAAQW,EAAqB,CAC3C,GAAM,CAACC,CAAC,EAAIb,EAAOY,CAAE,EACrB,OAAOC,IAAM,CACf,CAGO,SAASX,EAAOU,EAAoB,CACzC,GAAM,CAACC,CAAC,EAAIb,EAAOY,CAAE,EACrB,OAAOC,CACT","names":["mercID_exports","__export","children","contains","fromID","isFace","level","neighborsXY","parent","toID","toIJ","__toCommonJS","zoom","x","y","idB","id","z","neighbors","currentZoom","parentID","childID","pz","px","py","cz","cx","cy","mask"]}