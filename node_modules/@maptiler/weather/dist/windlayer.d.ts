import { MapMLGL } from "@maptiler/sdk";
import { ColorRamp } from "./colorramp";
import { ParticleLayer } from "./particlelayer";
import { RgbaColor } from "./utils";
/**
 * Type as returned by the `.pickAt()` method
 */
export type WindPickAt = {
    /**
     * Wind speed in m/s (meters per second)
     */
    speedMetersPerSecond: number;
    /**
     * Wind speed in km/h (kilometer per second)
     */
    speedKilometersPerHour: number;
    /**
     * Wind speed in mph (miles per hour)
     */
    speedMilesPerHour: number;
    /**
     * Wind speed in ft/s (feet per second)
     */
    speedFeetPerSecond: number;
    /**
     * Wind speed in knots (nautical miles per hour)
     */
    speedKnots: number;
    /**
     * Angular direction in dregree towards which the wind is blowing, with:
     * - `0째`: true north
     * - `90째`: east
     * - `180째`: south
     * - `270째`: west
     */
    directionAngle: number;
    /**
     * Conventionnaly, wind direction is refered as where the wind comes from.
     * For instance a north wind is a wind coming from the north.
     * This property retrieves one of the 16 compass direction.
     */
    compassDirection: string;
};
export type WindLayerOptions = {
    /**
     * ID of the layer
     */
    id?: string;
    /**
     * Quantity of particles to be created. Default value is `128`.
     * Has to be a power of 2 and at least `4`.
     * The actual exact number will be `particles * particles`.
     * Try to keep this value as low as possible to optimize performance.
     *
     * The number of actually visible particles is determined by {@link density}.
     */
    maxAmount?: number;
    /**
     * Color of the particle. RGBA 0-255. Defaults to `[255, 255, 255, 192]`
     */
    color?: RgbaColor;
    /**
     * Color of the particle when moving "fast". RGBA 0-255. Defaults to {@link color}
     */
    fastColor?: RgbaColor;
    /**
     * What is considered "fast" (in px/sec) for coloring purposes.
     * Only makes sense when {@link fastColor} is used.
     */
    fastSpeed?: number;
    /**
     * Number of particles visible per 1000 px^2. Default is `2`.
     */
    density?: number;
    /**
     * Use more pixels to make particles more smooth (especially when tilted).
     * Defaults to `2` for normal displays and `1` for HiDPI displays.
     */
    pixelRatio?: number;
    /**
     * Size of the particle. Defaults to `1.5`
     */
    size?: number;
    /**
     * Speed factor of the particles. Defaults to `0.001`
     */
    speed?: number;
    /**
     * Time interval (in milliseconds) how often the particles
     * are refreshed to avoid degradation.
     * Random `1/16` of the particles is always randomly reset.
     * Default value is `800`.
     */
    refreshInterval?: number;
    /**
     * How much the particles fade over time.
     * Default value is `0.1`.
     */
    fadeFactor?: number;
    /**
     * Opacity of the layer in [0, 1]
     */
    opacity?: number;
    /**
     * Colormap to use
     */
    colorramp?: ColorRamp;
    /**
     * Whether or not the colorramp shows interpolated colors
     */
    smooth?: boolean;
    /**
     * If this is `true`, the particles gets slighly larger as they become faster.
     * Default: `false`
     */
    fastIsLarger?: boolean;
};
/**
 * The WindLayer shows the atmospheric wind in millibar (or hectopascal)
 */
export declare class WindLayer extends ParticleLayer {
    private constructorOptions;
    private isSourceReady;
    private colorRamp;
    constructor(options?: WindLayerOptions);
    onAdd(map: MapMLGL, gl: WebGLRenderingContext | WebGL2RenderingContext): Promise<void>;
    /**
     * Check if the data source that fuels the layer has been fully fetched and processed
     * @returns
     */
    getIsSourceReady(): boolean;
    /**
     * Get the wind speed and direction in multiple measurement units at a given location
     * @param lng
     * @param lat
     * @returns
     */
    pickAt(lng: number, lat: number): WindPickAt | null;
    /**
     * Get the color ramp in use by the layer
     * @returns
     */
    getColorRamp(): Readonly<ColorRamp>;
}
