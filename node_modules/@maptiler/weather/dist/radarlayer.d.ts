import { MapMLGL } from "@maptiler/sdk";
import { ColorRamp } from "./colorramp";
import { TileLayer } from "./tilelayer";
/**
 * Type as returned by the `.pickAt()` method
 */
export type RadarPickAt = {
    /**
     * Reflectivity in dBZ unit
     */
    value: number;
} | null;
export type RadarLayerOptions = {
    /**
     * ID of the layer
     */
    id?: string;
    /**
     * Opacity of the layer in [0, 1]
     */
    opacity?: number;
    /**
     * Colormap to use
     */
    colorramp?: ColorRamp;
    /**
     * Whether or not the colorramp must be smooth
     */
    smooth?: boolean;
};
/**
 * The RadarLayer shows the atmospheric radar in centigrade
 */
export declare class RadarLayer extends TileLayer {
    private constructorOptions;
    private isSourceReady;
    private colorRamp;
    constructor(options?: RadarLayerOptions);
    onAdd(map: MapMLGL, gl: WebGLRenderingContext | WebGL2RenderingContext): Promise<void>;
    /**
     * Check if the data source that fuels the layer has been fully fetched and processed
     * @returns
     */
    getIsSourceReady(): boolean;
    /**
     * Get the radar reflectivity in dBZ at a given location
     * @param lng
     * @param lat
     * @returns
     */
    pickAt(lng: number, lat: number): RadarPickAt;
    /**
     * Get the color ramp in use by the layer
     * @returns
     */
    getColorRamp(): Readonly<ColorRamp>;
}
