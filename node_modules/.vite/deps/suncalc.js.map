{
  "version": 3,
  "sources": ["../../suncalc/suncalc.js"],
  "sourcesContent": ["/*\n (c) 2011-2015, Vladimir Agafonkin\n SunCalc is a JavaScript library for calculating sun/moon position and light phases.\n https://github.com/mourner/suncalc\n*/\n\n(function () { 'use strict';\n\n// shortcuts for easier to read formulas\n\nvar PI   = Math.PI,\n    sin  = Math.sin,\n    cos  = Math.cos,\n    tan  = Math.tan,\n    asin = Math.asin,\n    atan = Math.atan2,\n    acos = Math.acos,\n    rad  = PI / 180;\n\n// sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas\n\n\n// date/time constants and conversions\n\nvar dayMs = 1000 * 60 * 60 * 24,\n    J1970 = 2440588,\n    J2000 = 2451545;\n\nfunction toJulian(date) { return date.valueOf() / dayMs - 0.5 + J1970; }\nfunction fromJulian(j)  { return new Date((j + 0.5 - J1970) * dayMs); }\nfunction toDays(date)   { return toJulian(date) - J2000; }\n\n\n// general calculations for position\n\nvar e = rad * 23.4397; // obliquity of the Earth\n\nfunction rightAscension(l, b) { return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l)); }\nfunction declination(l, b)    { return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l)); }\n\nfunction azimuth(H, phi, dec)  { return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi)); }\nfunction altitude(H, phi, dec) { return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H)); }\n\nfunction siderealTime(d, lw) { return rad * (280.16 + 360.9856235 * d) - lw; }\n\nfunction astroRefraction(h) {\n    if (h < 0) // the following formula works for positive altitudes only.\n        h = 0; // if h = -0.08901179 a div/0 would occur.\n\n    // formula 16.4 of \"Astronomical Algorithms\" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.\n    // 1.02 / tan(h + 10.26 / (h + 5.10)) h in degrees, result in arc minutes -> converted to rad:\n    return 0.0002967 / Math.tan(h + 0.00312536 / (h + 0.08901179));\n}\n\n// general sun calculations\n\nfunction solarMeanAnomaly(d) { return rad * (357.5291 + 0.98560028 * d); }\n\nfunction eclipticLongitude(M) {\n\n    var C = rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M)), // equation of center\n        P = rad * 102.9372; // perihelion of the Earth\n\n    return M + C + P + PI;\n}\n\nfunction sunCoords(d) {\n\n    var M = solarMeanAnomaly(d),\n        L = eclipticLongitude(M);\n\n    return {\n        dec: declination(L, 0),\n        ra: rightAscension(L, 0)\n    };\n}\n\n\nvar SunCalc = {};\n\n\n// calculates sun position for a given date and latitude/longitude\n\nSunCalc.getPosition = function (date, lat, lng) {\n\n    var lw  = rad * -lng,\n        phi = rad * lat,\n        d   = toDays(date),\n\n        c  = sunCoords(d),\n        H  = siderealTime(d, lw) - c.ra;\n\n    return {\n        azimuth: azimuth(H, phi, c.dec),\n        altitude: altitude(H, phi, c.dec)\n    };\n};\n\n\n// sun times configuration (angle, morning name, evening name)\n\nvar times = SunCalc.times = [\n    [-0.833, 'sunrise',       'sunset'      ],\n    [  -0.3, 'sunriseEnd',    'sunsetStart' ],\n    [    -6, 'dawn',          'dusk'        ],\n    [   -12, 'nauticalDawn',  'nauticalDusk'],\n    [   -18, 'nightEnd',      'night'       ],\n    [     6, 'goldenHourEnd', 'goldenHour'  ]\n];\n\n// adds a custom time to the times config\n\nSunCalc.addTime = function (angle, riseName, setName) {\n    times.push([angle, riseName, setName]);\n};\n\n\n// calculations for sun times\n\nvar J0 = 0.0009;\n\nfunction julianCycle(d, lw) { return Math.round(d - J0 - lw / (2 * PI)); }\n\nfunction approxTransit(Ht, lw, n) { return J0 + (Ht + lw) / (2 * PI) + n; }\nfunction solarTransitJ(ds, M, L)  { return J2000 + ds + 0.0053 * sin(M) - 0.0069 * sin(2 * L); }\n\nfunction hourAngle(h, phi, d) { return acos((sin(h) - sin(phi) * sin(d)) / (cos(phi) * cos(d))); }\nfunction observerAngle(height) { return -2.076 * Math.sqrt(height) / 60; }\n\n// returns set time for the given sun altitude\nfunction getSetJ(h, lw, phi, dec, n, M, L) {\n\n    var w = hourAngle(h, phi, dec),\n        a = approxTransit(w, lw, n);\n    return solarTransitJ(a, M, L);\n}\n\n\n// calculates sun times for a given date, latitude/longitude, and, optionally,\n// the observer height (in meters) relative to the horizon\n\nSunCalc.getTimes = function (date, lat, lng, height) {\n\n    height = height || 0;\n\n    var lw = rad * -lng,\n        phi = rad * lat,\n\n        dh = observerAngle(height),\n\n        d = toDays(date),\n        n = julianCycle(d, lw),\n        ds = approxTransit(0, lw, n),\n\n        M = solarMeanAnomaly(ds),\n        L = eclipticLongitude(M),\n        dec = declination(L, 0),\n\n        Jnoon = solarTransitJ(ds, M, L),\n\n        i, len, time, h0, Jset, Jrise;\n\n\n    var result = {\n        solarNoon: fromJulian(Jnoon),\n        nadir: fromJulian(Jnoon - 0.5)\n    };\n\n    for (i = 0, len = times.length; i < len; i += 1) {\n        time = times[i];\n        h0 = (time[0] + dh) * rad;\n\n        Jset = getSetJ(h0, lw, phi, dec, n, M, L);\n        Jrise = Jnoon - (Jset - Jnoon);\n\n        result[time[1]] = fromJulian(Jrise);\n        result[time[2]] = fromJulian(Jset);\n    }\n\n    return result;\n};\n\n\n// moon calculations, based on http://aa.quae.nl/en/reken/hemelpositie.html formulas\n\nfunction moonCoords(d) { // geocentric ecliptic coordinates of the moon\n\n    var L = rad * (218.316 + 13.176396 * d), // ecliptic longitude\n        M = rad * (134.963 + 13.064993 * d), // mean anomaly\n        F = rad * (93.272 + 13.229350 * d),  // mean distance\n\n        l  = L + rad * 6.289 * sin(M), // longitude\n        b  = rad * 5.128 * sin(F),     // latitude\n        dt = 385001 - 20905 * cos(M);  // distance to the moon in km\n\n    return {\n        ra: rightAscension(l, b),\n        dec: declination(l, b),\n        dist: dt\n    };\n}\n\nSunCalc.getMoonPosition = function (date, lat, lng) {\n\n    var lw  = rad * -lng,\n        phi = rad * lat,\n        d   = toDays(date),\n\n        c = moonCoords(d),\n        H = siderealTime(d, lw) - c.ra,\n        h = altitude(H, phi, c.dec),\n        // formula 14.1 of \"Astronomical Algorithms\" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.\n        pa = atan(sin(H), tan(phi) * cos(c.dec) - sin(c.dec) * cos(H));\n\n    h = h + astroRefraction(h); // altitude correction for refraction\n\n    return {\n        azimuth: azimuth(H, phi, c.dec),\n        altitude: h,\n        distance: c.dist,\n        parallacticAngle: pa\n    };\n};\n\n\n// calculations for illumination parameters of the moon,\n// based on http://idlastro.gsfc.nasa.gov/ftp/pro/astro/mphase.pro formulas and\n// Chapter 48 of \"Astronomical Algorithms\" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.\n\nSunCalc.getMoonIllumination = function (date) {\n\n    var d = toDays(date || new Date()),\n        s = sunCoords(d),\n        m = moonCoords(d),\n\n        sdist = 149598000, // distance from Earth to Sun in km\n\n        phi = acos(sin(s.dec) * sin(m.dec) + cos(s.dec) * cos(m.dec) * cos(s.ra - m.ra)),\n        inc = atan(sdist * sin(phi), m.dist - sdist * cos(phi)),\n        angle = atan(cos(s.dec) * sin(s.ra - m.ra), sin(s.dec) * cos(m.dec) -\n                cos(s.dec) * sin(m.dec) * cos(s.ra - m.ra));\n\n    return {\n        fraction: (1 + cos(inc)) / 2,\n        phase: 0.5 + 0.5 * inc * (angle < 0 ? -1 : 1) / Math.PI,\n        angle: angle\n    };\n};\n\n\nfunction hoursLater(date, h) {\n    return new Date(date.valueOf() + h * dayMs / 24);\n}\n\n// calculations for moon rise/set times are based on http://www.stargazing.net/kepler/moonrise.html article\n\nSunCalc.getMoonTimes = function (date, lat, lng, inUTC) {\n    var t = new Date(date);\n    if (inUTC) t.setUTCHours(0, 0, 0, 0);\n    else t.setHours(0, 0, 0, 0);\n\n    var hc = 0.133 * rad,\n        h0 = SunCalc.getMoonPosition(t, lat, lng).altitude - hc,\n        h1, h2, rise, set, a, b, xe, ye, d, roots, x1, x2, dx;\n\n    // go in 2-hour chunks, each time seeing if a 3-point quadratic curve crosses zero (which means rise or set)\n    for (var i = 1; i <= 24; i += 2) {\n        h1 = SunCalc.getMoonPosition(hoursLater(t, i), lat, lng).altitude - hc;\n        h2 = SunCalc.getMoonPosition(hoursLater(t, i + 1), lat, lng).altitude - hc;\n\n        a = (h0 + h2) / 2 - h1;\n        b = (h2 - h0) / 2;\n        xe = -b / (2 * a);\n        ye = (a * xe + b) * xe + h1;\n        d = b * b - 4 * a * h1;\n        roots = 0;\n\n        if (d >= 0) {\n            dx = Math.sqrt(d) / (Math.abs(a) * 2);\n            x1 = xe - dx;\n            x2 = xe + dx;\n            if (Math.abs(x1) <= 1) roots++;\n            if (Math.abs(x2) <= 1) roots++;\n            if (x1 < -1) x1 = x2;\n        }\n\n        if (roots === 1) {\n            if (h0 < 0) rise = i + x1;\n            else set = i + x1;\n\n        } else if (roots === 2) {\n            rise = i + (ye < 0 ? x2 : x1);\n            set = i + (ye < 0 ? x1 : x2);\n        }\n\n        if (rise && set) break;\n\n        h0 = h2;\n    }\n\n    var result = {};\n\n    if (rise) result.rise = hoursLater(t, rise);\n    if (set) result.set = hoursLater(t, set);\n\n    if (!rise && !set) result[ye > 0 ? 'alwaysUp' : 'alwaysDown'] = true;\n\n    return result;\n};\n\n\n// export as Node module / AMD module / browser variable\nif (typeof exports === 'object' && typeof module !== 'undefined') module.exports = SunCalc;\nelse if (typeof define === 'function' && define.amd) define(SunCalc);\nelse window.SunCalc = SunCalc;\n\n}());\n"],
  "mappings": "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",
  "names": []
}
